'use client';

import { useAuth } from '@/components/auth/AuthProvider';
import { useProfile } from '@/components/auth/ProfileProvider';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { getUserGroups } from '@/lib/actions/groups';
import { Group } from '@/lib/types';
import { 
  Users, 
  MapPin, 
  DollarSign, 
  Bell, 
  Shield, 
  Smartphone,
  ArrowRight,
  CheckCircle,
  Star,
  Heart
} from 'lucide-react';
import Link from 'next/link';
import TripCreateModal from '@/components/modals/TripCreateModal';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';

export default function WelcomePage() {
  const { user } = useAuth();
  const { profile } = useProfile();
  const router = useRouter();
  const [groups, setGroups] = useState<Group[]>([]);

  // Redirect n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
  useEffect(() => {
    if (!user) {
      router.push('/login');
    }
  }, [user, router]);

  // Mark that user has seen welcome page when component mounts
  useEffect(() => {
    if (user && profile && typeof window !== 'undefined') {
      localStorage.setItem(`budgo_welcome_seen_${user.uid}`, 'true');
    }
  }, [user, profile]);

  // Load groups for trip creation modal
  useEffect(() => {
    if (user) {
      loadGroups();
    }
  }, [user]);

  const loadGroups = async () => {
    try {
      if (!user?.uid) {
        console.warn('No user ID available for loading groups');
        return;
      }
      const userGroups = await getUserGroups(user.uid);
      setGroups(userGroups);
      console.log('Loaded groups for welcome page:', userGroups.length);
    } catch (error) {
      console.error('Error loading groups:', error);
    }
  };

  // Handle navigation to dashboard
  const handleGoToDashboard = () => {
    if (user && typeof window !== 'undefined') {
      // Ensure welcome flag is set before navigating
      localStorage.setItem(`budgo_welcome_seen_${user.uid}`, 'true');
      router.push('/dashboard');
    }
  };

  // Handle navigation to help page
  const handleGoToHelp = () => {
    router.push('/help');
  };

  if (!user || !profile) {
    return (
      <div className="bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center" style={{ minHeight: 'calc(100vh - 200px)' }}>
        <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin" />
      </div>
    );
  }

  const features = [
    {
      icon: <Users className="w-6 h-6 text-blue-600" />,
      title: "Qu·∫£n l√Ω nh√≥m th√¥ng minh",
      description: "T·∫°o nh√≥m Public, Close ho·∫∑c Secret. M·ªùi b·∫°n b√® v√† qu·∫£n l√Ω quy·ªÅn h·∫°n d·ªÖ d√†ng.",
      benefits: ["3 lo·∫°i nh√≥m linh ho·∫°t", "M·ªùi b·∫°n b√® nhanh ch√≥ng", "Ph√¢n quy·ªÅn r√µ r√†ng"]
    },
    {
      icon: <MapPin className="w-6 h-6 text-green-600" />,
      title: "L·∫≠p k·∫ø ho·∫°ch chuy·∫øn ƒëi",
      description: "T·∫°o chuy·∫øn ƒëi c√° nh√¢n ho·∫∑c nh√≥m v·ªõi th√¥ng tin chi ti·∫øt v√† ƒëa ti·ªÅn t·ªá.",
      benefits: ["Chuy·∫øn ƒëi c√° nh√¢n & nh√≥m", "H·ªó tr·ª£ VND & USD", "Ghi ch√∫ ƒë·∫ßy ƒë·ªß"]
    },
    {
      icon: <DollarSign className="w-6 h-6 text-amber-600" />,
      title: "Chia s·∫ª chi ph√≠ minh b·∫°ch",
      description: "Ghi nh·∫≠n chi ph√≠, chia ƒë·ªÅu ho·∫∑c theo tr·ªçng s·ªë, qu·∫£n l√Ω t·∫°m ·ª©ng v√† quy·∫øt to√°n t·ª± ƒë·ªông.",
      benefits: ["Chia ƒë·ªÅu ho·∫∑c theo tr·ªçng s·ªë", "Qu·∫£n l√Ω t·∫°m ·ª©ng", "Quy·∫øt to√°n t·ª± ƒë·ªông"]
    },
    {
      icon: <Bell className="w-6 h-6 text-purple-600" />,
      title: "Th√¥ng b√°o th√¥ng minh",
      description: "Nh·∫≠n th√¥ng b√°o real-time v·ªÅ m·ªçi ho·∫°t ƒë·ªông trong nh√≥m v√† chuy·∫øn ƒëi.",
      benefits: ["C·∫≠p nh·∫≠t real-time", "ƒêa d·∫°ng lo·∫°i th√¥ng b√°o", "Qu·∫£n l√Ω tr·∫°ng th√°i"]
    }
  ];

  const quickActions = [
    {
      title: "T·∫°o nh√≥m ƒë·∫ßu ti√™n",
      description: "B·∫Øt ƒë·∫ßu v·ªõi vi·ªác t·∫°o nh√≥m ƒë·ªÉ m·ªùi b·∫°n b√®",
      action: "T·∫°o nh√≥m",
      href: "/groups/create",
      color: "bg-blue-500 hover:bg-blue-600"
    },
    {
      title: "L·∫≠p k·∫ø ho·∫°ch chuy·∫øn ƒëi",
      description: "T·∫°o chuy·∫øn ƒëi c√° nh√¢n ho·∫∑c thu·ªôc nh√≥m",
      action: "T·∫°o chuy·∫øn ƒëi",
      href: "/trips/create",
      color: "bg-green-500 hover:bg-green-600"
    },
    {
      title: "Kh√°m ph√° dashboard",
      description: "Xem t·ªïng quan v√† qu·∫£n l√Ω t·∫•t c·∫£",
      action: "V√†o dashboard",
      href: "/dashboard",
      color: "bg-purple-500 hover:bg-purple-600"
    }
  ];

  return (
    <div className="bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50" style={{ minHeight: 'calc(100vh - 200px)' }}>
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full mb-6">
            <Heart className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Budgo!
          </h1>
          <p className="text-xl text-gray-600 mb-6">
            Xin ch√†o <span className="font-semibold text-blue-600">{profile.name}</span>! 
            Ch√∫ng t√¥i r·∫•t vui m·ª´ng ch√†o ƒë√≥n b·∫°n ƒë·∫øn v·ªõi c·ªông ƒë·ªìng qu·∫£n l√Ω nh√≥m v√† chuy·∫øn ƒëi.
          </p>
          <Badge variant="secondary" className="text-sm px-4 py-2">
            <Star className="w-4 h-4 mr-2" />
            Th√†nh vi√™n m·ªõi
          </Badge>
        </div>

        {/* Features Overview */}
        <div className="mb-16">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            üåü Kh√°m ph√° nh·ªØng t√≠nh nƒÉng tuy·ªát v·ªùi
          </h2>
          <div className="grid md:grid-cols-2 gap-8">
            {features.map((feature, index) => (
              <Card key={index} className="hover:shadow-lg transition-shadow duration-300">
                <CardHeader>
                  <div className="flex items-center space-x-3">
                    {feature.icon}
                    <CardTitle className="text-xl">{feature.title}</CardTitle>
                  </div>
                  <CardDescription className="text-base">
                    {feature.description}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {feature.benefits.map((benefit, idx) => (
                      <li key={idx} className="flex items-center space-x-2">
                        <CheckCircle className="w-4 h-4 text-green-500" />
                        <span className="text-sm text-gray-600">{benefit}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Quick Actions */}
        <div className="mb-16">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            üöÄ B·∫Øt ƒë·∫ßu ngay h√¥m nay
          </h2>
          <div className="grid md:grid-cols-3 gap-6">
            {quickActions.map((action, index) => (
              <Card key={index} className="hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
                <CardHeader>
                  <CardTitle className="text-lg">{action.title}</CardTitle>
                  <CardDescription>{action.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  {action.href === '/trips/create' ? (
                    <TripCreateModal
                      trigger={
                        <Button className={`w-full ${action.color} text-white`}>
                          {action.action}
                          <ArrowRight className="w-4 h-4 ml-2" />
                        </Button>
                      }
                      groups={groups}
                      onSuccess={(tripId, groupId, tripSlug) => {
                        if (groupId) {
                          const group = groups.find(g => g.id === groupId);
                          if (group) {
                            router.push(`/g/${group.slug}/trips/${tripSlug}/manage`);
                          } else {
                            router.push(`/trips/${tripSlug}/manage`);
                          }
                        } else {
                          router.push(`/trips/${tripSlug}/manage`);
                        }
                      }}
                    />
                  ) : (
                    <Link href={action.href}>
                      <Button className={`w-full ${action.color} text-white`}>
                        {action.action}
                        <ArrowRight className="w-4 h-4 ml-2" />
                      </Button>
                    </Link>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Tips & Best Practices */}
        <div className="mb-16">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            üí° M·∫πo s·ª≠ d·ª•ng hi·ªáu qu·∫£
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            <Card className="bg-blue-50 border-blue-200">
              <CardContent className="p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                    <Users className="w-5 h-5 text-blue-600" />
                  </div>
                  <h3 className="font-semibold text-blue-900">T·∫°o nh√≥m ph√π h·ª£p</h3>
                </div>
                <p className="text-sm text-blue-800">
                  Ch·ªçn lo·∫°i nh√≥m ph√π h·ª£p: Public cho c·ªông ƒë·ªìng, Close cho b·∫°n b√®, Secret cho ri√™ng t∆∞.
                </p>
              </CardContent>
            </Card>

            <Card className="bg-green-50 border-green-200">
              <CardContent className="p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                    <DollarSign className="w-5 h-5 text-green-600" />
                  </div>
                  <h3 className="font-semibold text-green-900">Chia s·∫ª chi ph√≠ th√¥ng minh</h3>
                </div>
                <p className="text-sm text-green-800">
                  S·ª≠ d·ª•ng &quot;Chia ƒë·ªÅu&quot; khi m·ªçi ng∆∞·ªùi tham gia ƒë·∫ßy ƒë·ªß, &quot;Theo tr·ªçng s·ªë&quot; khi c√≥ s·ª± kh√°c bi·ªát.
                </p>
              </CardContent>
            </Card>

            <Card className="bg-purple-50 border-purple-200">
              <CardContent className="p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
                    <Bell className="w-5 h-5 text-purple-600" />
                  </div>
                  <h3 className="font-semibold text-purple-900">Theo d√µi th√¥ng b√°o</h3>
                </div>
                <p className="text-sm text-purple-800">
                  Ki·ªÉm tra th√¥ng b√°o th∆∞·ªùng xuy√™n ƒë·ªÉ kh√¥ng b·ªè l·ª° c·∫≠p nh·∫≠t quan tr·ªçng t·ª´ nh√≥m.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Security & Support */}
        <div className="mb-16">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            üõ°Ô∏è B·∫£o m·∫≠t & H·ªó tr·ª£
          </h2>
          <div className="grid md:grid-cols-2 gap-8">
            <Card className="bg-gray-50">
              <CardHeader>
                <div className="flex items-center space-x-3">
                  <Shield className="w-6 h-6 text-gray-600" />
                  <CardTitle>B·∫£o m·∫≠t tuy·ªát ƒë·ªëi</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2 text-sm text-gray-600">
                  <li>‚Ä¢ X√°c th·ª±c Google an to√†n</li>
                  <li>‚Ä¢ M√£ h√≥a d·ªØ li·ªáu b·∫£o m·∫≠t</li>
                  <li>‚Ä¢ Ki·ªÉm so√°t quy·ªÅn truy c·∫≠p</li>
                  <li>‚Ä¢ Kh√¥ng chia s·∫ª th√¥ng tin c√° nh√¢n</li>
                </ul>
              </CardContent>
            </Card>

            <Card className="bg-gray-50">
              <CardHeader>
                <div className="flex items-center space-x-3">
                  <Smartphone className="w-6 h-6 text-gray-600" />
                  <CardTitle>ƒêa n·ªÅn t·∫£ng</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2 text-sm text-gray-600">
                  <li>‚Ä¢ Ho·∫°t ƒë·ªông tr√™n m·ªçi thi·∫øt b·ªã</li>
                  <li>‚Ä¢ ƒê·ªìng b·ªô real-time</li>
                  <li>‚Ä¢ Giao di·ªán th√¢n thi·ªán</li>
                  <li>‚Ä¢ T·ªëc ƒë·ªô nhanh ch√≥ng</li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Call to Action */}
        <div className="text-center">
          <Card className="bg-gradient-to-r from-blue-600 to-purple-600 text-white border-0">
            <CardContent className="p-8">
              <h3 className="text-2xl font-bold mb-4">
                üéä Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi!
              </h3>
              <p className="text-lg mb-6 opacity-90">
                Budgo ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ l√†m cho vi·ªác qu·∫£n l√Ω nh√≥m v√† chuy·∫øn ƒëi tr·ªü n√™n ƒë∆°n gi·∫£n, minh b·∫°ch v√† th√∫ v·ªã.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button size="lg" variant="secondary" className="bg-white text-blue-600 hover:bg-gray-100" onClick={handleGoToDashboard}>
                  V√†o Dashboard
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
                <Button size="lg" className="border-2 border-white text-white hover:bg-white hover:text-blue-600 bg-transparent" onClick={handleGoToHelp}>
                  Xem h∆∞·ªõng d·∫´n
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

